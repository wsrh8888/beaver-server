// Code generated by goctl. DO NOT EDIT.
// Source: user_rpc.proto

package user

import (
	"context"

	"beaver/app/user/user_rpc/types/user_rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	IsFriendReq     = user_rpc.IsFriendReq
	IsFriendRes     = user_rpc.IsFriendRes
	UserCreateReq   = user_rpc.UserCreateReq
	UserCreateRes   = user_rpc.UserCreateRes
	UserInfo        = user_rpc.UserInfo
	UserInfoReq     = user_rpc.UserInfoReq
	UserInfoRes     = user_rpc.UserInfoRes
	UserListInfoReq = user_rpc.UserListInfoReq
	UserListInfoRes = user_rpc.UserListInfoRes

	User interface {
		UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserCreateRes, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error)
		IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendRes, error)
		UserListInfo(ctx context.Context, in *UserListInfoReq, opts ...grpc.CallOption) (*UserListInfoRes, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserCreateRes, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.UserCreate(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUser) IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendRes, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.IsFriend(ctx, in, opts...)
}

func (m *defaultUser) UserListInfo(ctx context.Context, in *UserListInfoReq, opts ...grpc.CallOption) (*UserListInfoRes, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.UserListInfo(ctx, in, opts...)
}
