syntax = "v1"

type LoginReq {
	Phone    string `json:"phone"`
	Password string `json:"password"`
	DeviceID string `header:"deviceId"` // 客户端生成的设备唯一标识符
}

type LoginRes {
	Token  string `json:"token"`
	UserID string `json:"userId"`
}

type AuthenticationReq {
	Token string `header:"Token,optional"`
	/**
* @description: 验证路径
*/
	ValidPath string `header:"ValidPath,optional"`
}

type AuthenticationRes {
	UserID string `json:"userId"`
}

type RegisterReq {
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

type RegisterRes {}

// 用户登出请求
type LogoutReq {
	UserID string `header:"Beaver-User-Id"`
}

// 用户登出响应
type LogoutRes {}

// 刷新Token请求
type RefreshTokenReq {
	UserID string `header:"Beaver-User-Id"`
}

// 刷新Token响应
type RefreshTokenRes {
	Token string `json:"token"`
}

// 获取用户会话列表请求
type GetUserSessionsReq {
	UserID string `header:"Beaver-User-Id"`
}

// 会话信息
type SessionInfo {
	DeviceID   string `json:"deviceId"`
	DeviceName string `json:"deviceName"`
	LastActive string `json:"lastActive"`
	IP         string `json:"ip"`
}

// 获取用户会话列表响应
type GetUserSessionsRes {
	Sessions []SessionInfo `json:"sessions"`
}

// 终止会话请求
type TerminateSessionReq {
	UserID   string `header:"Beaver-User-Id"`
	DeviceID string `json:"deviceId"`
}

// 终止会话响应
type TerminateSessionRes {}

service auth {
	// 用户登录
	@handler login
	post /api/auth/login (LoginReq) returns (LoginRes)

	// 用户认证
	@handler authentication
	get /api/auth/authentication (AuthenticationReq) returns (AuthenticationRes)

	// 用户注册
	@handler register
	post /api/auth/register (RegisterReq) returns (RegisterRes)

	// 用户登出
	@handler logout
	post /api/auth/logout (LogoutReq) returns (LogoutRes)

	// 刷新Token
	@handler refreshToken
	post /api/auth/refresh_token (RefreshTokenReq) returns (RefreshTokenRes)

	// 获取用户会话列表用户想查看自己当前在哪些设备上登录
	@handler getUserSessions
	get /api/auth/sessions (GetUserSessionsReq) returns (GetUserSessionsRes)

	// 终止会话 用户发现某个设备不是自己登录的,需要强制下线
	@handler terminateSession
	post /api/auth/terminate_session (TerminateSessionReq) returns (TerminateSessionRes)
}

// goctl api go -api auth_api.api -dir . --home ../../../template
