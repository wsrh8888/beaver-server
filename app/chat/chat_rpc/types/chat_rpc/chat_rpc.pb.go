// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.3
// source: chat_rpc.proto

package chat_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义TextMsg消息
type TextMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` // 文本消息内容
}

func (x *TextMsg) Reset() {
	*x = TextMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMsg) ProtoMessage() {}

func (x *TextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMsg.ProtoReflect.Descriptor instead.
func (*TextMsg) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *TextMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 定义FileMsg消息
type FileMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Src   string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Size  int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"` // 文件大小 单位字节
	Type  string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`  // 文件类型
}

func (x *FileMsg) Reset() {
	*x = FileMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMsg) ProtoMessage() {}

func (x *FileMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMsg.ProtoReflect.Descriptor instead.
func (*FileMsg) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *FileMsg) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FileMsg) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *FileMsg) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileMsg) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 定义VoiceMsg消息
type VoiceMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src  string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Time int32  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"` // 语音时长 单位秒
}

func (x *VoiceMsg) Reset() {
	*x = VoiceMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceMsg) ProtoMessage() {}

func (x *VoiceMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceMsg.ProtoReflect.Descriptor instead.
func (*VoiceMsg) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *VoiceMsg) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *VoiceMsg) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 定义VideoMsg消息
type VideoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Src   string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Time  int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"` // 视频时长 单位秒
}

func (x *VideoMsg) Reset() {
	*x = VideoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMsg) ProtoMessage() {}

func (x *VideoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMsg.ProtoReflect.Descriptor instead.
func (*VideoMsg) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *VideoMsg) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VideoMsg) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *VideoMsg) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 定义ImageMsg消息
type ImageMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileId string `protobuf:"bytes,2,opt,name=fileId,proto3" json:"fileId,omitempty"`
}

func (x *ImageMsg) Reset() {
	*x = ImageMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMsg) ProtoMessage() {}

func (x *ImageMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMsg.ProtoReflect.Descriptor instead.
func (*ImageMsg) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *ImageMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageMsg) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// 定义Msg消息
type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`        // 消息类型 1:文本 2:图片 3:视频 4:文件 5、语音 6：语音通话 7：视频通话 8撤回消息 9：回复消息 10：引用消息
	TextMsg  *TextMsg  `protobuf:"bytes,2,opt,name=textMsg,proto3" json:"textMsg,omitempty"`   // 文本消息
	ImageMsg *ImageMsg `protobuf:"bytes,3,opt,name=imageMsg,proto3" json:"imageMsg,omitempty"` // 图片
	VideoMsg *VideoMsg `protobuf:"bytes,4,opt,name=videoMsg,proto3" json:"videoMsg,omitempty"` // 视频
	FileMsg  *FileMsg  `protobuf:"bytes,5,opt,name=fileMsg,proto3" json:"fileMsg,omitempty"`   // 文件
	VoiceMsg *VoiceMsg `protobuf:"bytes,6,opt,name=voiceMsg,proto3" json:"voiceMsg,omitempty"` // 语音
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *Msg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Msg) GetTextMsg() *TextMsg {
	if x != nil {
		return x.TextMsg
	}
	return nil
}

func (x *Msg) GetImageMsg() *ImageMsg {
	if x != nil {
		return x.ImageMsg
	}
	return nil
}

func (x *Msg) GetVideoMsg() *VideoMsg {
	if x != nil {
		return x.VideoMsg
	}
	return nil
}

func (x *Msg) GetFileMsg() *FileMsg {
	if x != nil {
		return x.FileMsg
	}
	return nil
}

func (x *Msg) GetVoiceMsg() *VoiceMsg {
	if x != nil {
		return x.VoiceMsg
	}
	return nil
}

// 定义SendMsgReq消息
type SendMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`                                       // 用户ID
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 会话ID
	MessageId      string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                // 客户端消息ID
	Msg            *Msg   `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`                                             // 消息内容
}

func (x *SendMsgReq) Reset() {
	*x = SendMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgReq) ProtoMessage() {}

func (x *SendMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgReq.ProtoReflect.Descriptor instead.
func (*SendMsgReq) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *SendMsgReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SendMsgReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SendMsgReq) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SendMsgReq) GetMsg() *Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

// 定义Sender消息
type Sender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Avatar   string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *Sender) Reset() {
	*x = Sender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sender) ProtoMessage() {}

func (x *Sender) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sender.ProtoReflect.Descriptor instead.
func (*Sender) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *Sender) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Sender) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Sender) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

// 定义SendMsgRes消息
type SendMsgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 数据库自增ID
	MessageId      string  `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                // 客户端消息ID
	ConversationId string  `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 会话ID
	Msg            *Msg    `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`                                             // 消息内容
	Sender         *Sender `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`                                       // 发送者
	CreateAt       string  `protobuf:"bytes,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                   // 消息时间
	MsgPreview     string  `protobuf:"bytes,7,opt,name=msg_preview,json=msgPreview,proto3" json:"msg_preview,omitempty"`             // 消息预览
}

func (x *SendMsgRes) Reset() {
	*x = SendMsgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgRes) ProtoMessage() {}

func (x *SendMsgRes) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgRes.ProtoReflect.Descriptor instead.
func (*SendMsgRes) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *SendMsgRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SendMsgRes) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SendMsgRes) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SendMsgRes) GetMsg() *Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SendMsgRes) GetSender() *Sender {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *SendMsgRes) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *SendMsgRes) GetMsgPreview() string {
	if x != nil {
		return x.MsgPreview
	}
	return ""
}

// 定义UpdateConversationReq消息
type UpdateConversationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 会话ID
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
	LastMessage    string `protobuf:"bytes,3,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`          // 最后一条消息
	IsPinned       bool   `protobuf:"varint,4,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`                  // 是否置顶
	IsDeleted      bool   `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`               // 是否已删除
}

func (x *UpdateConversationReq) Reset() {
	*x = UpdateConversationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationReq) ProtoMessage() {}

func (x *UpdateConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationReq.ProtoReflect.Descriptor instead.
func (*UpdateConversationReq) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateConversationReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *UpdateConversationReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateConversationReq) GetLastMessage() string {
	if x != nil {
		return x.LastMessage
	}
	return ""
}

func (x *UpdateConversationReq) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *UpdateConversationReq) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

// 定义UpdateConversationRes消息
type UpdateConversationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
}

func (x *UpdateConversationRes) Reset() {
	*x = UpdateConversationRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationRes) ProtoMessage() {}

func (x *UpdateConversationRes) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationRes.ProtoReflect.Descriptor instead.
func (*UpdateConversationRes) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateConversationRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 定义BatchUpdateConversationReq消息
type BatchUpdateConversationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId string   `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 会话ID
	UserIds        []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`                      // 用户ID列表
	LastMessage    string   `protobuf:"bytes,3,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`          // 最后一条消息
}

func (x *BatchUpdateConversationReq) Reset() {
	*x = BatchUpdateConversationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateConversationReq) ProtoMessage() {}

func (x *BatchUpdateConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateConversationReq.ProtoReflect.Descriptor instead.
func (*BatchUpdateConversationReq) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *BatchUpdateConversationReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *BatchUpdateConversationReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *BatchUpdateConversationReq) GetLastMessage() string {
	if x != nil {
		return x.LastMessage
	}
	return ""
}

// 定义BatchUpdateConversationRes消息
type BatchUpdateConversationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
}

func (x *BatchUpdateConversationRes) Reset() {
	*x = BatchUpdateConversationRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateConversationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateConversationRes) ProtoMessage() {}

func (x *BatchUpdateConversationRes) ProtoReflect() protoreflect.Message {
	mi := &file_chat_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateConversationRes.ProtoReflect.Descriptor instead.
func (*BatchUpdateConversationRes) Descriptor() ([]byte, []int) {
	return file_chat_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *BatchUpdateConversationRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_chat_rpc_proto protoreflect.FileDescriptor

var file_chat_rpc_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x22, 0x23, 0x0a, 0x07, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x59, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x08, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x08,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x83, 0x02, 0x0a,
	0x03, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x73, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x54, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x73,
	0x67, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x1a,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x32, 0xfc, 0x01, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x35, 0x0a,
	0x07, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x17,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_rpc_proto_rawDescOnce sync.Once
	file_chat_rpc_proto_rawDescData = file_chat_rpc_proto_rawDesc
)

func file_chat_rpc_proto_rawDescGZIP() []byte {
	file_chat_rpc_proto_rawDescOnce.Do(func() {
		file_chat_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_rpc_proto_rawDescData)
	})
	return file_chat_rpc_proto_rawDescData
}

var file_chat_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_chat_rpc_proto_goTypes = []interface{}{
	(*TextMsg)(nil),                    // 0: chat_rpc.TextMsg
	(*FileMsg)(nil),                    // 1: chat_rpc.FileMsg
	(*VoiceMsg)(nil),                   // 2: chat_rpc.VoiceMsg
	(*VideoMsg)(nil),                   // 3: chat_rpc.VideoMsg
	(*ImageMsg)(nil),                   // 4: chat_rpc.ImageMsg
	(*Msg)(nil),                        // 5: chat_rpc.Msg
	(*SendMsgReq)(nil),                 // 6: chat_rpc.SendMsgReq
	(*Sender)(nil),                     // 7: chat_rpc.Sender
	(*SendMsgRes)(nil),                 // 8: chat_rpc.SendMsgRes
	(*UpdateConversationReq)(nil),      // 9: chat_rpc.UpdateConversationReq
	(*UpdateConversationRes)(nil),      // 10: chat_rpc.UpdateConversationRes
	(*BatchUpdateConversationReq)(nil), // 11: chat_rpc.BatchUpdateConversationReq
	(*BatchUpdateConversationRes)(nil), // 12: chat_rpc.BatchUpdateConversationRes
}
var file_chat_rpc_proto_depIdxs = []int32{
	0,  // 0: chat_rpc.Msg.textMsg:type_name -> chat_rpc.TextMsg
	4,  // 1: chat_rpc.Msg.imageMsg:type_name -> chat_rpc.ImageMsg
	3,  // 2: chat_rpc.Msg.videoMsg:type_name -> chat_rpc.VideoMsg
	1,  // 3: chat_rpc.Msg.fileMsg:type_name -> chat_rpc.FileMsg
	2,  // 4: chat_rpc.Msg.voiceMsg:type_name -> chat_rpc.VoiceMsg
	5,  // 5: chat_rpc.SendMsgReq.msg:type_name -> chat_rpc.Msg
	5,  // 6: chat_rpc.SendMsgRes.msg:type_name -> chat_rpc.Msg
	7,  // 7: chat_rpc.SendMsgRes.sender:type_name -> chat_rpc.Sender
	6,  // 8: chat_rpc.Chat.SendMsg:input_type -> chat_rpc.SendMsgReq
	9,  // 9: chat_rpc.Chat.UpdateConversation:input_type -> chat_rpc.UpdateConversationReq
	11, // 10: chat_rpc.Chat.BatchUpdateConversation:input_type -> chat_rpc.BatchUpdateConversationReq
	8,  // 11: chat_rpc.Chat.SendMsg:output_type -> chat_rpc.SendMsgRes
	10, // 12: chat_rpc.Chat.UpdateConversation:output_type -> chat_rpc.UpdateConversationRes
	12, // 13: chat_rpc.Chat.BatchUpdateConversation:output_type -> chat_rpc.BatchUpdateConversationRes
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_chat_rpc_proto_init() }
func file_chat_rpc_proto_init() {
	if File_chat_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateConversationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateConversationRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_rpc_proto_goTypes,
		DependencyIndexes: file_chat_rpc_proto_depIdxs,
		MessageInfos:      file_chat_rpc_proto_msgTypes,
	}.Build()
	File_chat_rpc_proto = out.File
	file_chat_rpc_proto_rawDesc = nil
	file_chat_rpc_proto_goTypes = nil
	file_chat_rpc_proto_depIdxs = nil
}
