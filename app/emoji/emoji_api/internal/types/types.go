// Code generated by goctl. DO NOT EDIT.
package types

type AddEmojiReq struct {
	UserID    string `header:"Beaver-User-Id"`
	FileId    string `json:"fileId"`
	Title     string `json:"title"`
	PackageID uint   `json:"packageId,optional"`
}

type AddEmojiRes struct {
}

type AddEmojiToPackageReq struct {
	UserID    string `header:"Beaver-User-Id"`
	PackageID uint   `json:"packageId"`
	FileId    string `json:"fileId"`
	Title     string `json:"title"`
}

type AddEmojiToPackageRes struct {
	EmojiID uint `json:"emojiId"`
}

type BatchAddEmojiToPackageReq struct {
	UserID    string  `header:"Beaver-User-Id"`
	PackageID uint    `json:"packageId"`
	Emojis    []Emoji `json:"emojis"`
}

type BatchAddEmojiToPackageRes struct {
	EmojiIDs []uint `json:"emojiIds"`
}

type CreateEmojiPackageReq struct {
	UserID      string `header:"Beaver-User-Id"`
	Title       string `json:"title"`
	CoverFile   string `json:"coverFile"`
	Description string `json:"description"`
}

type CreateEmojiPackageRes struct {
	PackageID uint `json:"packageId"`
}

type DeleteEmojiFromPackageReq struct {
	UserID    string `header:"Beaver-User-Id"`
	PackageID uint   `json:"packageId"`
	EmojiID   uint   `json:"emojiId"`
}

type DeleteEmojiFromPackageRes struct {
}

type Emoji struct {
	FileId string `json:"fileId"`
	Title  string `json:"title"`
}

type EmojiCategoryItem struct {
	CategoryID   uint   `json:"categoryId"`
	Name         string `json:"name"`
	Description  string `json:"description"`
	PackageCount int    `json:"packageCount"`
}

type EmojiItem struct {
	EmojiID   uint   `json:"emojiId"`
	FileId    string `json:"fileId"`
	Title     string `json:"title"`
	PackageID *uint  `json:"packageId"`
}

type EmojiPackageItem struct {
	PackageID    uint   `json:"packageId"`
	Title        string `json:"title"`
	CoverFile    string `json:"coverFile"`
	Description  string `json:"description"`
	Type         string `json:"type"` // 类型：official-官方，user-用户自定义
	CollectCount int    `json:"collectCount"`
	EmojiCount   int    `json:"emojiCount"`
	IsCollected  bool   `json:"isCollected"` // 当前用户是否已收藏
	IsAuthor     bool   `json:"isAuthor"`    // 当前用户是否是作者
}

type GetEmojiPackageDetailReq struct {
	UserID    string `header:"Beaver-User-Id"`
	PackageID uint   `json:"packageId"`
}

type GetEmojiPackageDetailRes struct {
	PackageID    uint        `json:"packageId"`
	Title        string      `json:"title"`
	CoverFile    string      `json:"coverFile"`
	Description  string      `json:"description"`
	Type         string      `json:"type"` // 类型：official-官方，user-用户自定义
	CollectCount int         `json:"collectCount"`
	EmojiCount   int         `json:"emojiCount"`
	IsCollected  bool        `json:"isCollected"`
	IsAuthor     bool        `json:"isAuthor"` // 当前用户是否是作者
	Emojis       []EmojiItem `json:"emojis"`
}

type GetEmojiPackagesReq struct {
	UserID     string `header:"Beaver-User-Id"`
	CategoryID uint   `json:"categoryId,optional"` // 可选，按分类筛选
	Type       string `json:"type,optional"`       // 可选，按类型筛选：official-官方，user-用户自定义
	Page       int    `json:"page"`
	Size       int    `json:"size"`
}

type GetEmojiPackagesRes struct {
	Count int64              `json:"count"`
	List  []EmojiPackageItem `json:"list"`
}

type GetEmojisListReq struct {
	UserID string `header:"Beaver-User-Id"`
	Page   int    `json:"page"`
	Size   int    `json:"size"`
}

type GetEmojisListRes struct {
	Count int64       `json:"count"`
	List  []EmojiItem `json:"list"`
}

type GetUserFavoritePackagesReq struct {
	UserID string `header:"Beaver-User-Id"`
	Page   int    `json:"page"`
	Size   int    `json:"size"`
}

type GetUserFavoritePackagesRes struct {
	Count int64              `json:"count"`
	List  []EmojiPackageItem `json:"list"`
}

type UpdateFavoriteEmojiPackageReq struct {
	UserID    string `header:"Beaver-User-Id"`
	PackageID uint   `json:"packageId"`
	Type      string `json:"type"` // "favorite" or "unfavorite"
}

type UpdateFavoriteEmojiPackageRes struct {
}

type UpdateFavoriteEmojiReq struct {
	UserID  string `header:"Beaver-User-Id"`
	EmojiID uint   `json:"emojiId"`
	Type    string `json:"type"` // "favorite" or "unfavorite"
}

type UpdateFavoriteEmojiRes struct {
}
