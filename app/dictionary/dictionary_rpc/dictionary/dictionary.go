// Code generated by goctl. DO NOT EDIT.
// Source: dictionary_rpc.proto

package dictionary

import (
	"context"

	"beaver/app/dictionary/dictionary_rpc/types/dictionary_rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ArchitectureInfo    = dictionary_rpc.ArchitectureInfo
	CityInfo            = dictionary_rpc.CityInfo
	GetArchitecturesReq = dictionary_rpc.GetArchitecturesReq
	GetArchitecturesRes = dictionary_rpc.GetArchitecturesRes
	GetCitiesReq        = dictionary_rpc.GetCitiesReq
	GetCitiesRes        = dictionary_rpc.GetCitiesRes
	GetPlatformsReq     = dictionary_rpc.GetPlatformsReq
	GetPlatformsRes     = dictionary_rpc.GetPlatformsRes
	PlatformInfo        = dictionary_rpc.PlatformInfo

	Dictionary interface {
		// 获取城市列表
		GetCities(ctx context.Context, in *GetCitiesReq, opts ...grpc.CallOption) (*GetCitiesRes, error)
		// 获取平台列表
		GetPlatforms(ctx context.Context, in *GetPlatformsReq, opts ...grpc.CallOption) (*GetPlatformsRes, error)
		// 获取架构列表
		GetArchitectures(ctx context.Context, in *GetArchitecturesReq, opts ...grpc.CallOption) (*GetArchitecturesRes, error)
	}

	defaultDictionary struct {
		cli zrpc.Client
	}
)

func NewDictionary(cli zrpc.Client) Dictionary {
	return &defaultDictionary{
		cli: cli,
	}
}

// 获取城市列表
func (m *defaultDictionary) GetCities(ctx context.Context, in *GetCitiesReq, opts ...grpc.CallOption) (*GetCitiesRes, error) {
	client := dictionary_rpc.NewDictionaryClient(m.cli.Conn())
	return client.GetCities(ctx, in, opts...)
}

// 获取平台列表
func (m *defaultDictionary) GetPlatforms(ctx context.Context, in *GetPlatformsReq, opts ...grpc.CallOption) (*GetPlatformsRes, error) {
	client := dictionary_rpc.NewDictionaryClient(m.cli.Conn())
	return client.GetPlatforms(ctx, in, opts...)
}

// 获取架构列表
func (m *defaultDictionary) GetArchitectures(ctx context.Context, in *GetArchitecturesReq, opts ...grpc.CallOption) (*GetArchitecturesRes, error) {
	client := dictionary_rpc.NewDictionaryClient(m.cli.Conn())
	return client.GetArchitectures(ctx, in, opts...)
}
