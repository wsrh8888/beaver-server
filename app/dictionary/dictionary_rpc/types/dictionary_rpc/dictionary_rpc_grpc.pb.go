// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: dictionary_rpc.proto

package dictionary_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dictionary_GetCities_FullMethodName        = "/dictionary_rpc.dictionary/GetCities"
	Dictionary_GetPlatforms_FullMethodName     = "/dictionary_rpc.dictionary/GetPlatforms"
	Dictionary_GetArchitectures_FullMethodName = "/dictionary_rpc.dictionary/GetArchitectures"
)

// DictionaryClient is the client API for Dictionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionaryClient interface {
	// 获取城市列表
	GetCities(ctx context.Context, in *GetCitiesReq, opts ...grpc.CallOption) (*GetCitiesRes, error)
	// 获取平台列表
	GetPlatforms(ctx context.Context, in *GetPlatformsReq, opts ...grpc.CallOption) (*GetPlatformsRes, error)
	// 获取架构列表
	GetArchitectures(ctx context.Context, in *GetArchitecturesReq, opts ...grpc.CallOption) (*GetArchitecturesRes, error)
}

type dictionaryClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryClient(cc grpc.ClientConnInterface) DictionaryClient {
	return &dictionaryClient{cc}
}

func (c *dictionaryClient) GetCities(ctx context.Context, in *GetCitiesReq, opts ...grpc.CallOption) (*GetCitiesRes, error) {
	out := new(GetCitiesRes)
	err := c.cc.Invoke(ctx, Dictionary_GetCities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) GetPlatforms(ctx context.Context, in *GetPlatformsReq, opts ...grpc.CallOption) (*GetPlatformsRes, error) {
	out := new(GetPlatformsRes)
	err := c.cc.Invoke(ctx, Dictionary_GetPlatforms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) GetArchitectures(ctx context.Context, in *GetArchitecturesReq, opts ...grpc.CallOption) (*GetArchitecturesRes, error) {
	out := new(GetArchitecturesRes)
	err := c.cc.Invoke(ctx, Dictionary_GetArchitectures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServer is the server API for Dictionary service.
// All implementations must embed UnimplementedDictionaryServer
// for forward compatibility
type DictionaryServer interface {
	// 获取城市列表
	GetCities(context.Context, *GetCitiesReq) (*GetCitiesRes, error)
	// 获取平台列表
	GetPlatforms(context.Context, *GetPlatformsReq) (*GetPlatformsRes, error)
	// 获取架构列表
	GetArchitectures(context.Context, *GetArchitecturesReq) (*GetArchitecturesRes, error)
	mustEmbedUnimplementedDictionaryServer()
}

// UnimplementedDictionaryServer must be embedded to have forward compatible implementations.
type UnimplementedDictionaryServer struct {
}

func (UnimplementedDictionaryServer) GetCities(context.Context, *GetCitiesReq) (*GetCitiesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCities not implemented")
}
func (UnimplementedDictionaryServer) GetPlatforms(context.Context, *GetPlatformsReq) (*GetPlatformsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatforms not implemented")
}
func (UnimplementedDictionaryServer) GetArchitectures(context.Context, *GetArchitecturesReq) (*GetArchitecturesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchitectures not implemented")
}
func (UnimplementedDictionaryServer) mustEmbedUnimplementedDictionaryServer() {}

// UnsafeDictionaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServer will
// result in compilation errors.
type UnsafeDictionaryServer interface {
	mustEmbedUnimplementedDictionaryServer()
}

func RegisterDictionaryServer(s grpc.ServiceRegistrar, srv DictionaryServer) {
	s.RegisterService(&Dictionary_ServiceDesc, srv)
}

func _Dictionary_GetCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).GetCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_GetCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).GetCities(ctx, req.(*GetCitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_GetPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).GetPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_GetPlatforms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).GetPlatforms(ctx, req.(*GetPlatformsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_GetArchitectures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchitecturesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).GetArchitectures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_GetArchitectures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).GetArchitectures(ctx, req.(*GetArchitecturesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dictionary_ServiceDesc is the grpc.ServiceDesc for Dictionary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dictionary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictionary_rpc.dictionary",
	HandlerType: (*DictionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCities",
			Handler:    _Dictionary_GetCities_Handler,
		},
		{
			MethodName: "GetPlatforms",
			Handler:    _Dictionary_GetPlatforms_Handler,
		},
		{
			MethodName: "GetArchitectures",
			Handler:    _Dictionary_GetArchitectures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictionary_rpc.proto",
}
